id_name = data %>%
.[1] %>%
names()
id_mapping = data %>%
distinct(.data[[id_name]], .data[[arc_number_field_name]]) %>%
drop_na() %>%
mutate(arc_num = as.numeric(arc_number_field_name)) %>%
rowwise() %>%
mutate(arc_num_hash = digest::sha1(arc_num)) %>%
ungroup()
assign('id_mapping', id_mapping, envir = .GlobalEnv)
if (keep_individual_instruments) {
load_individual_redcap_instruments(data, API_key, redcap_server = redcap_server_choice)
}
data
}
redcap_data = load_redcap_instruments(token, 'arcnumber')
load_redcap_instruments = function(API_key,
arc_number_field_name,
redcap_server = c('redcapsurvey', 'redcap'),
raw_or_label = c('raw', 'label'),
keep_individual_instruments = F) {
redcap_server_choice = match.arg(redcap_server)
redcap_server_url = paste0('https://',
redcap_server_choice,
'.niddk.nih.gov/redcap_v12.0.19/api/')
data = REDCapR::redcap_read(redcap_uri = redcap_server_url,
token = API_key,
raw_or_label = match.arg(raw_or_label),
export_survey_fields = T)$data %>%
as_tibble() %>%
select(!ends_with('_identifier'))
id_name = data %>%
.[1] %>%
names()
id_mapping = data %>%
distinct(.data[[id_name]], .data[[arc_number_field_name]]) %>%
drop_na() %>%
rename(arc_num = .data[[arc_number_field_name]]) %>%
mutate(arc_num = as.numeric(arc_num)) %>%
rowwise() %>%
mutate(arc_num_hash = digest::sha1(arc_num)) %>%
ungroup()
assign('id_mapping', id_mapping, envir = .GlobalEnv)
if (keep_individual_instruments) {
load_individual_redcap_instruments(data, API_key, redcap_server = redcap_server_choice)
}
data
}
redcap_data = load_redcap_instruments(token, 'arcnumber')
load_redcap_instruments = function(API_key,
arc_number_field_name,
redcap_server = c('redcapsurvey', 'redcap'),
raw_or_label = c('raw', 'label'),
keep_individual_instruments = F) {
redcap_server_choice = match.arg(redcap_server)
redcap_server_url = paste0('https://',
redcap_server_choice,
'.niddk.nih.gov/redcap_v12.0.19/api/')
data = REDCapR::redcap_read(redcap_uri = redcap_server_url,
token = API_key,
raw_or_label = match.arg(raw_or_label),
export_survey_fields = T)$data %>%
as_tibble() %>%
select(!ends_with('_identifier'))
id_name = data %>%
.[1] %>%
names()
id_mapping = data %>%
distinct(.data[[id_name]], .data[[arc_number_field_name]]) %>%
drop_na()
names(id_mapping) = c('redcap_id', 'arc_number')
id_mapping %>%
mutate(arc_number = as.numeric(arc_number)) %>%
rowwise() %>%
mutate(arc_number_hash = digest::sha1(arc_number)) %>%
ungroup()
assign('id_mapping', id_mapping, envir = .GlobalEnv)
if (keep_individual_instruments) {
load_individual_redcap_instruments(data, API_key, redcap_server = redcap_server_choice)
}
data
}
redcap_data = load_redcap_instruments(token, 'arcnumber')
id_mapping
load_redcap_instruments = function(API_key,
arc_number_field_name,
redcap_server = c('redcapsurvey', 'redcap'),
raw_or_label = c('raw', 'label'),
keep_individual_instruments = F) {
redcap_server_choice = match.arg(redcap_server)
redcap_server_url = paste0('https://',
redcap_server_choice,
'.niddk.nih.gov/redcap_v12.0.19/api/')
data = REDCapR::redcap_read(redcap_uri = redcap_server_url,
token = API_key,
raw_or_label = match.arg(raw_or_label),
export_survey_fields = T)$data %>%
as_tibble() %>%
select(!ends_with('_identifier'))
id_name = data %>%
.[1] %>%
names()
id_mapping = data %>%
distinct(.data[[id_name]], .data[[arc_number_field_name]]) %>%
drop_na()
names(id_mapping) = c('redcap_id', 'arc_number')
id_mapping = id_mapping %>%
mutate(arc_number = as.numeric(arc_number)) %>%
rowwise() %>%
mutate(arc_number_hash = digest::sha1(arc_number)) %>%
ungroup()
assign('id_mapping', id_mapping, envir = .GlobalEnv)
if (keep_individual_instruments) {
load_individual_redcap_instruments(data, API_key, redcap_server = redcap_server_choice)
}
data
}
id_mapping
redcap_data = load_redcap_instruments(token, 'arcnumber')
id_mapping
load_cdw_data = function(protocol_name,
path = '//nida-filestore/NRB-CPN-CDWData/',
keep_individual_instruments = T,
id_map = id_mapping,
instrument_env = .InstrumentEnv) {
base_filename = paste0(path, protocol_name, '_')
questionnaires = load_and_prep_cdw_data('TestsandQuestionnaires', base_filename, id_map)
vitals = load_and_prep_cdw_data('VitalSigns', base_filename, id_map)
drugs = load_and_prep_cdw_data('DrugIntake', base_filename, id_map)
bio_samples = load_and_prep_cdw_data('BiologicalSamples', base_filename, id_map)
if (keep_individual_instruments) {
.GlobalEnv$cdw_questionnaires = questionnaires
.GlobalEnv$cdw_vitals = vitals
.GlobalEnv$cdw_drugs = drugs
.GlobalEnv$cdw_bio_samples = bio_samples
}
question_short_form = questionnaires %>%
distinct(Question, QuestionID)
all_cdw_data = questionnaires %>%
select(id, TDesc, Date, QuestionID, Answer) %>%
bind_rows(vitals %>%
mutate(TDesc = 'Vitals') %>%
select(id, TDesc, `Vital Signs`, `Date Entered`, Value) %>%
rename(QuestionID = `Vital Signs`,
Date = `Date Entered`,
Answer = Value)) %>%
bind_rows(drugs %>%
mutate(TDesc = 'DrugsAdministered') %>%
select(id, TDesc, Drug, `Date Administered`, Dosage) %>%
rename(QuestionID = Drug,
Date = `Date Administered`,
Answer = Dosage)) %>%
bind_rows(bio_samples %>%
select(id, Lab, Observation, `Collection Date`, Value) %>%
rename(TDesc = Lab,
QuestionID = Observation,
Date = `Collection Date`,
Answer = Value)) %>%
rename(test = TDesc,
date = Date,
question = QuestionID,
response = Answer) %>%
mutate(response = ifelse(response == '&nbsp' | response == '&nbsp;', NA, response),
date = strptime(date, '%m/%d/%Y %H:%M:%S %p'))
.InstrumentEnv$complete_instruments_cdw = all_cdw_data
all_cdw_data
}
cdw_data = load_cdw_data('922MDD(NIC-MDD)', path = '//nida-filestore/NRB-CPN-CDWData')
load_individual_redcap_instruments = function(API_key,
arc_number_field_name,
complete_redcap_data = NULL,
redcap_server = c('redcapsurvey', 'redcap')) {
redcap_server_choice = match.arg(redcap_server)
redcap_server_url = paste0('https://',
redcap_server_choice,
'.niddk.nih.gov/redcap_v12.0.19/api/')
metadata = REDCapR::redcap_metadata_read(redcap_uri = redcap_server_url,
token = API_key)$data
.InstrumentEnv$redcap_metadata = metadata
id_name = metadata %>%
filter(row_number() == 1) %>%
.$field_name
if (is.null(complete_redcap_data)) {
complete_redcap_data = load_redcap_instruments(API_key,
arc_number_field_name,
redcap_server = redcap_server_choice)
}
forms = metadata %>% distinct(form_name)
for (form in forms$form_name) {
instrument = complete_redcap_data %>%
select(id, any_of(metadata %>%
filter(form_name == form,
field_name != id_name) %>%
.$field_name))
assign(form, instrument, envir = .GlobalEnv)
}
}
load_individual_redcap_instruments(token, 'arcnumber')
load_individual_redcap_instruments = function(API_key,
arc_number_field_name,
complete_redcap_data = NULL,
redcap_server = c('redcapsurvey', 'redcap')) {
redcap_server_choice = match.arg(redcap_server)
redcap_server_url = paste0('https://',
redcap_server_choice,
'.niddk.nih.gov/redcap_v12.0.19/api/')
metadata = REDCapR::redcap_metadata_read(redcap_uri = redcap_server_url,
token = API_key)$data
.GlobalEnv$.InstrumentEnv = rlang::new_environment(parent = .GlobalEnv)
.InstrumentEnv$redcap_metadata = metadata
id_name = metadata %>%
filter(row_number() == 1) %>%
.$field_name
if (is.null(complete_redcap_data)) {
complete_redcap_data = load_redcap_instruments(API_key,
arc_number_field_name,
redcap_server = redcap_server_choice)
}
forms = metadata %>% distinct(form_name)
for (form in forms$form_name) {
instrument = complete_redcap_data %>%
select(id, any_of(metadata %>%
filter(form_name == form,
field_name != id_name) %>%
.$field_name))
assign(form, instrument, envir = .GlobalEnv)
}
}
load_individual_redcap_instruments(token, 'arcnumber')
.InstrumentEnv
.InstrumentEnv$redcap_metadata
load_individual_redcap_instruments(token, 'arcnumber')
.InstrumentEnv$redcap_metadata
exists(.InstrumentEnv)
exists('.InstrumentEnv')
exists('.InstrumentEnv2')
is.environment(.InstrumentEnv)
form_name = 'participant_profile'
get(form_name)
rm(form_name)
rm(get(form_name))
rm(as.symbol(form_name))
as.symbol(form_name)
form_name = 'participant_profile'
as.symbol(form_name)
rm(as.symbol(form_name))
rm(get(form_name))
as.name(form_name)
rm(as.name(form_name))
form_name
rm(form_name)
clear_individual_redcap_instruments = function() {
if (is.environment(.InstrumentEnv)) {
.InstrumentEnv$redcap_metadata %>%
distinct(form_name) %>%
with(rm(list=.$form_name))
}
}
clear_individual_redcap_instruments()
warnings()
ls()
clear_individual_redcap_instruments = function() {
if (is.environment(.InstrumentEnv)) {
.InstrumentEnv$redcap_metadata %>%
distinct(form_name) %>%
with(rm(list=.$form_name,
envir = .GlobalEnv))
}
}
clear_individual_redcap_instruments()
clear_individual_redcap_instruments()
warnings()
load_individual_redcap_instruments = function(API_key,
arc_number_field_name,
complete_redcap_data = NULL,
redcap_server = c('redcapsurvey', 'redcap')) {
redcap_server_choice = match.arg(redcap_server)
redcap_server_url = paste0('https://',
redcap_server_choice,
'.niddk.nih.gov/redcap_v12.0.19/api/')
metadata = REDCapR::redcap_metadata_read(redcap_uri = redcap_server_url,
token = API_key)$data
.GlobalEnv$.redcap_metadata = metadata
id_name = metadata %>%
filter(row_number() == 1) %>%
.$field_name
if (is.null(complete_redcap_data)) {
complete_redcap_data = load_redcap_instruments(API_key,
arc_number_field_name,
redcap_server = redcap_server_choice)
}
forms = metadata %>% distinct(form_name)
for (form in forms$form_name) {
instrument = complete_redcap_data %>%
select(id, any_of(metadata %>%
filter(form_name == form,
field_name != id_name) %>%
.$field_name))
assign(form, instrument, envir = .GlobalEnv)
}
}
load_individual_redcap_instruments = function(API_key,
arc_number_field_name,
complete_redcap_data = NULL,
redcap_server = c('redcapsurvey', 'redcap')) {
redcap_server_choice = match.arg(redcap_server)
redcap_server_url = paste0('https://',
redcap_server_choice,
'.niddk.nih.gov/redcap_v12.0.19/api/')
metadata = REDCapR::redcap_metadata_read(redcap_uri = redcap_server_url,
token = API_key)$data
.GlobalEnv$.redcap_metadata = metadata
id_name = metadata %>%
filter(row_number() == 1) %>%
.$field_name
if (is.null(complete_redcap_data)) {
complete_redcap_data = load_redcap_instruments(API_key,
arc_number_field_name,
redcap_server = redcap_server_choice)
}
forms = metadata %>% distinct(form_name)
for (form in forms$form_name) {
instrument = complete_redcap_data %>%
select(id, any_of(metadata %>%
filter(form_name == form,
field_name != id_name) %>%
.$field_name))
assign(form, instrument, envir = .GlobalEnv)
}
}
load_individual_redcap_instruments(token, 'arcnumber')
exists(.redcap_metadata)
exists('.redcap_metadata')
clear_individual_redcap_instruments = function() {
if (exists('.redcap_metadata', envir = .GlobalEnv)) {
.GlobalEnv$.redcap_metadata %>%
distinct(form_name) %>%
with(rm(list=.$form_name,
envir = .GlobalEnv))
}
}
clear_individual_redcap_instruments()
cdw_data = load_cdw_data('922MDD(NIC-MDD)', '//nida-filestore/NRB-CPN-CDWData')
#' Load all CDW data.
#'
#' Reads CDW data and creates a single merged data frame from all tables, in long format.
#' @param protocol_name The name of the protocol. In practice, the first part of the file name in the CDW dump folder.
#' @param path The path to the CDW dump folder.
#' @param keep_individual_instruments Load individual instruments into the global environment. Default: TRUE
#' @param id_map The mapping from REDCap ID to CDW ARC #. Use the sensitive version since ARC #s need to be read. Default: id_mapping_sensitive
#' @param instrument_env The environment containing individual REDCap instruments. Default: .InstrumentEnv
#' @return The fully merged CDW data frame, in long form.
load_cdw_data = function(protocol_name,
path,
keep_individual_instruments = T,
id_map = id_mapping,
instrument_env = .InstrumentEnv) {
base_filename = file.path(path, paste0(protocol_name, '_'))
questionnaires = load_and_prep_cdw_data('TestsandQuestionnaires', base_filename, id_map)
vitals = load_and_prep_cdw_data('VitalSigns', base_filename, id_map)
drugs = load_and_prep_cdw_data('DrugIntake', base_filename, id_map)
bio_samples = load_and_prep_cdw_data('BiologicalSamples', base_filename, id_map)
if (keep_individual_instruments) {
.GlobalEnv$cdw_questionnaires = questionnaires
.GlobalEnv$cdw_vitals = vitals
.GlobalEnv$cdw_drugs = drugs
.GlobalEnv$cdw_bio_samples = bio_samples
}
question_short_form = questionnaires %>%
distinct(Question, QuestionID)
all_cdw_data = questionnaires %>%
select(id, TDesc, Date, QuestionID, Answer) %>%
bind_rows(vitals %>%
mutate(TDesc = 'Vitals') %>%
select(id, TDesc, `Vital Signs`, `Date Entered`, Value) %>%
rename(QuestionID = `Vital Signs`,
Date = `Date Entered`,
Answer = Value)) %>%
bind_rows(drugs %>%
mutate(TDesc = 'DrugsAdministered') %>%
select(id, TDesc, Drug, `Date Administered`, Dosage) %>%
rename(QuestionID = Drug,
Date = `Date Administered`,
Answer = Dosage)) %>%
bind_rows(bio_samples %>%
select(id, Lab, Observation, `Collection Date`, Value) %>%
rename(TDesc = Lab,
QuestionID = Observation,
Date = `Collection Date`,
Answer = Value)) %>%
rename(test = TDesc,
date = Date,
question = QuestionID,
response = Answer) %>%
mutate(response = ifelse(response == '&nbsp' | response == '&nbsp;', NA, response),
date = strptime(date, '%m/%d/%Y %H:%M:%S %p'))
.InstrumentEnv$complete_instruments_cdw = all_cdw_data
all_cdw_data
}
cdw_data = load_cdw_data('922MDD(NIC-MDD)', '//nida-filestore/NRB-CPN-CDWData')
cdw_data
load_and_prep_cdw_data = function(filename, base_filename, id_map) {
read_csv(paste0(base_filename, filename, '.csv'))
}
load_cdw_data = function(protocol_name,
path,
keep_individual_instruments = T,
instrument_env = .InstrumentEnv) {
base_filename = file.path(path, paste0(protocol_name, '_'))
questionnaires = load_and_prep_cdw_data('TestsandQuestionnaires', base_filename)
vitals = load_and_prep_cdw_data('VitalSigns', base_filename)
drugs = load_and_prep_cdw_data('DrugIntake', base_filename)
bio_samples = load_and_prep_cdw_data('BiologicalSamples', base_filename)
if (keep_individual_instruments) {
.GlobalEnv$cdw_questionnaires = questionnaires
.GlobalEnv$cdw_vitals = vitals
.GlobalEnv$cdw_drugs = drugs
.GlobalEnv$cdw_bio_samples = bio_samples
}
question_short_form = questionnaires %>%
distinct(Question, QuestionID)
all_cdw_data = questionnaires %>%
select(id, TDesc, Date, QuestionID, Answer) %>%
bind_rows(vitals %>%
mutate(TDesc = 'Vitals') %>%
select(id, TDesc, `Vital Signs`, `Date Entered`, Value) %>%
rename(QuestionID = `Vital Signs`,
Date = `Date Entered`,
Answer = Value)) %>%
bind_rows(drugs %>%
mutate(TDesc = 'DrugsAdministered') %>%
select(id, TDesc, Drug, `Date Administered`, Dosage) %>%
rename(QuestionID = Drug,
Date = `Date Administered`,
Answer = Dosage)) %>%
bind_rows(bio_samples %>%
select(id, Lab, Observation, `Collection Date`, Value) %>%
rename(TDesc = Lab,
QuestionID = Observation,
Date = `Collection Date`,
Answer = Value)) %>%
rename(test = TDesc,
date = Date,
question = QuestionID,
response = Answer) %>%
mutate(response = ifelse(response == '&nbsp' | response == '&nbsp;', NA, response),
date = strptime(date, '%m/%d/%Y %H:%M:%S %p'))
all_cdw_data
}
cdw_data = load_cdw_data('922MDD(NIC-MDD)', '//nida-filestore/NRB-CPN-CDWData')
load_and_prep_cdw_data = function(filename, base_filename, id_map) {
read_csv(paste0(base_filename, filename, '.csv')) %>%
rename(`Arc#` = id)
}
load_cdw_data = function(protocol_name,
path,
keep_individual_instruments = T,
instrument_env = .InstrumentEnv) {
base_filename = file.path(path, paste0(protocol_name, '_'))
questionnaires = load_and_prep_cdw_data('TestsandQuestionnaires', base_filename)
vitals = load_and_prep_cdw_data('VitalSigns', base_filename)
drugs = load_and_prep_cdw_data('DrugIntake', base_filename)
bio_samples = load_and_prep_cdw_data('BiologicalSamples', base_filename)
if (keep_individual_instruments) {
.GlobalEnv$cdw_questionnaires = questionnaires
.GlobalEnv$cdw_vitals = vitals
.GlobalEnv$cdw_drugs = drugs
.GlobalEnv$cdw_bio_samples = bio_samples
}
question_short_form = questionnaires %>%
distinct(Question, QuestionID)
all_cdw_data = questionnaires %>%
select(id, TDesc, Date, QuestionID, Answer) %>%
bind_rows(vitals %>%
mutate(TDesc = 'Vitals') %>%
select(id, TDesc, `Vital Signs`, `Date Entered`, Value) %>%
rename(QuestionID = `Vital Signs`,
Date = `Date Entered`,
Answer = Value)) %>%
bind_rows(drugs %>%
mutate(TDesc = 'DrugsAdministered') %>%
select(id, TDesc, Drug, `Date Administered`, Dosage) %>%
rename(QuestionID = Drug,
Date = `Date Administered`,
Answer = Dosage)) %>%
bind_rows(bio_samples %>%
select(id, Lab, Observation, `Collection Date`, Value) %>%
rename(TDesc = Lab,
QuestionID = Observation,
Date = `Collection Date`,
Answer = Value)) %>%
rename(test = TDesc,
date = Date,
question = QuestionID,
response = Answer) %>%
mutate(response = ifelse(response == '&nbsp' | response == '&nbsp;', NA, response),
date = strptime(date, '%m/%d/%Y %H:%M:%S %p'))
all_cdw_data
}
cdw_data = load_cdw_data('922MDD(NIC-MDD)', '//nida-filestore/NRB-CPN-CDWData')
load_and_prep_cdw_data = function(filename, base_filename, id_map) {
read_csv(paste0(base_filename, filename, '.csv')) %>%
rename(id = `Arc#`)
}
cdw_data = load_cdw_data('922MDD(NIC-MDD)', '//nida-filestore/NRB-CPN-CDWData')
cdw_data
cdw_questionnaires
cdw_questionnaires %>% filter(str_detect(TDesc, 'Ham'))
cdw_questionnaires %>% filter(str_detect(TDesc, 'Ham')) %>% View()
cdw_data = load_cdw_data('922Control(NIC-MDD)', '//nida-filestore/NRB-CPN-CDWData')
cdw_questionnaires %>% filter(str_detect(TDesc, 'Ham')) %>% View()
